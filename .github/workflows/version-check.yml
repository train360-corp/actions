name: Version Check

on:
  workflow_call:
    inputs:
      fail-on-no-change:
        description: "If true, the job will fail when the version has not changed"
        required: false
        default: true
        type: boolean
      file-name:
        description: "Path to JSON file to check for version changes"
        required: true
        type: string
      json-version-path:
        description: "jq path to version field (default is .version)"
        required: false
        default: ".version"
        type: string
    secrets:
      github-token:
        description: "GitHub token for version check"
        required: true
    outputs:
      version:
        description: "Detected version at HEAD"
        value: ${{ jobs.version-check.outputs.version }}
      previous-version:
        description: "Version at previous commit (HEAD^1)"
        value: ${{ jobs.version-check.outputs.previous-version }}
      changed:
        description: "Whether the version changed"
        value: ${{ jobs.version-check.outputs.changed }}

jobs:
  version-check:
    name: Check version change from previous commit
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.compare.outputs.version }}
      previous-version: ${{ steps.compare.outputs.previous_version }}
      changed: ${{ steps.compare.outputs.changed }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Ensure HEAD^1 is available

      - run: sudo apt-get install -y jq

      - name: Extract current version (HEAD)
        id: current
        run: |
          path="${{ inputs.json-version-path != '' && inputs.json-version-path || '.version' }}"
          version=$(jq -r "$path" "${{ inputs.file-name }}")
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Extract previous version (HEAD^1)
        id: previous
        run: |
          content=$(git show HEAD^:"${{ inputs.file-name }}")
          path="${{ inputs.json-version-path != '' && inputs.json-version-path || '.version' }}"
          version=$(echo "$content" | jq -r "$path")
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Compare versions
        id: compare
        run: |
          curr="${{ steps.current.outputs.version }}"
          prev="${{ steps.previous.outputs.version }}"

          echo "version=$curr" >> $GITHUB_OUTPUT
          echo "previous_version=$prev" >> $GITHUB_OUTPUT

          if [ "$curr" != "$prev" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: 🔍 Parse version components
        id: parse
        run: |
          parse_version() {
            version="$1"
            if [[ "$version" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              echo "major=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
              echo "minor=${BASH_REMATCH[2]}" >> $GITHUB_OUTPUT
              echo "patch=${BASH_REMATCH[3]}" >> $GITHUB_OUTPUT
            else
              echo "❌ Invalid version format: '$version'" >> $GITHUB_STEP_SUMMARY
              echo "::error title=Version Parse Error::Invalid version string: '$version'. Expected format: MAJOR.MINOR.PATCH"
              exit 1
            fi
          }

          parse_version "${{ steps.compare.outputs.version }}"

      - name: 📄 Write Summary
        run: |
          {
            echo "### ✅ Version Check Summary"
            echo ""
            echo "**File:** \`${{ inputs.file-name }}\`"
            echo "- Version: \`${{ steps.compare.outputs.version }}\`"
            echo "- Previous Version: \`${{ steps.compare.outputs.previous_version }}\`"
            echo "- Changed: \`${{ steps.compare.outputs.changed }}\`"
            echo ""
            echo "**Parsed Components:**"
            echo "- Major: \`${{ steps.parse.outputs.major }}\`"
            echo "- Minor: \`${{ steps.parse.outputs.minor }}\`"
            echo "- Patch: \`${{ steps.parse.outputs.patch }}\`"
          } >> $GITHUB_STEP_SUMMARY

      - name: ⛔ Fail if version not changed (optional)
        if: ${{ inputs.fail-on-no-change == 'true' && steps.compare.outputs.changed == 'false' }}
        run: |
          echo "::error title=No Version Change::Version did not change and fail-on-no-change is true."
          exit 1